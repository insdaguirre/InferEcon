from __future__ import annotations

import base64
import io
import sys
import os
from typing import List

import pandas as pd
import streamlit as st

# Add the parent directory to the path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from analysis_functions import load_functions
    from analysis_functions.config_interface import get_function_config, FUNCTION_CONFIGS
except ImportError:
    st.error("Failed to import analysis functions. Please check the deployment setup.")
    st.stop()

st.set_page_config(
    page_title="InferEcon - Econometrics Toolkit", 
    layout="wide",
    page_icon="📊"
)

st.title("📊 InferEcon: Econometrics Toolkit")
st.markdown("*Bringing the power of Stata to the Python ecosystem*")

# Load available functions
try:
    available_funcs = load_functions()
    st.sidebar.success(f"✅ Loaded {len(available_funcs)} analysis functions")
except Exception as e:
    st.sidebar.error(f"❌ Failed to load functions: {e}")
    st.stop()

st.sidebar.header("1) Upload CSV")
uploaded_file = st.sidebar.file_uploader(
    "Choose a CSV file", 
    type=["csv"],
    help="Upload your dataset to begin analysis"
) 

st.sidebar.header("2) Choose functions")
st.sidebar.markdown("Select the analyses you want to run:")

selected = []
for func in available_funcs:
    if st.sidebar.checkbox(
        func.display_name, 
        value=(func.display_name == "Summarize"),
        help=f"Run {func.display_name} analysis"
    ):
        selected.append(func)

if not selected:
    st.sidebar.warning("Please select at least one function to run.")

run = st.sidebar.button("🚀 Run Analysis", type="primary", disabled=not selected)

# Collect configurations for functions that require them
configurations: dict = {}
if uploaded_file is not None and selected:
    try:
        df_for_config = pd.read_csv(uploaded_file)
        # Rewind buffer so it can be read again later when running
        try:
            uploaded_file.seek(0)
        except Exception:
            pass
        # Which selected functions need configuration?
        config_needed = [f for f in selected if getattr(f, 'display_name', '') in FUNCTION_CONFIGS]
        if config_needed:
            st.header("3) Configure Functions")
            st.markdown("Some functions require variable/parameter selection. Configure them below:")
            for func in config_needed:
                with st.expander(f"Configure {func.display_name}", expanded=True):
                    cfg = get_function_config(func.display_name, df_for_config)
                    if cfg:
                        configurations[func.display_name] = cfg
                    else:
                        st.warning(f"Configuration incomplete for {func.display_name}")
    except Exception as exc:
        st.error(f"❌ Failed to build configuration menus: {exc}")

def _build_report_html(outputs: List[dict]) -> str:
    parts = [
        "<html><head><meta charset='utf-8'><title>InferEcon Report</title>",
        "<style>",
        "body{font-family:system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;padding:24px;max-width:1200px;margin:0 auto}",
        "table{border-collapse:collapse;width:100%;margin:20px 0}",
        "th,td{border:1px solid #ddd;padding:8px 12px;text-align:left}",
        "th{background:#f7f7f7;font-weight:600}",
        "h1{color:#FF6B6B;border-bottom:2px solid #FF6B6B;padding-bottom:10px}",
        "h2{color:#4A90E2;margin-top:30px}",
        ".header{text-align:center;margin-bottom:40px}",
        ".footer{margin-top:40px;text-align:center;color:#666;font-size:14px}",
        "</style>",
        "</head><body>",
        "<div class='header'>",
        "<h1>📊 InferEcon Analysis Report</h1>",
        "<p>Generated by InferEcon - Python-based Econometrics Toolkit</p>",
        "</div>",
    ]
    
    for item in outputs:
        parts.append(f"<h2>{item.get('title','Output')}</h2>")
        if item["type"] == "table":
            parts.append(item["data"].to_html(index=False, classes='dataframe'))
        elif item["type"] == "image":
            parts.append(f"<img src='data:image/png;base64,{item['data']}' style='max-width:100%;height:auto' />")
        elif item["type"] == "text":
            parts.append(f"<p>{item['data']}</p>")
    
    parts.append(
        "<div class='footer'>"
        "<p>Report generated by <a href='https://github.com/insdaguirre/InferEcon'>InferEcon</a></p>"
        "</div>"
        "</body></html>"
    )
    return "".join(parts)

# Main content area
if uploaded_file is None:
    st.info("👆 **Get Started**: Upload a CSV file from the sidebar to begin your econometric analysis.")
    
    st.markdown("### 🚀 Available Functions")
    col1, col2, col3 = st.columns(3)
    
    functions_by_category = {
        "Descriptive Statistics": ["Summarize", "Mean", "Tabstat", "Detail"],
        "Data Exploration": ["Describe", "List", "Tabulate", "Correlate"],
        "Regression & Diagnostics": ["Regress", "Estat IC", "Estat GOF", "Linktest"],
        "Visualization": ["Scatter", "Twoway", "Avplot", "Margins"],
        "Advanced Econometrics": ["Ivregress", "Hausman", "Xtreg", "Areg"],
        "Automation": ["Codebook", "Bysort", "Collapse"]
    }
    
    for i, (category, funcs) in enumerate(functions_by_category.items()):
        col = [col1, col2, col3][i % 3]
        with col:
            st.markdown(f"**{category}**")
            for func in funcs:
                st.markdown(f"• {func}")
    
    st.markdown("---")
    st.markdown("### 📚 About InferEcon")
    st.markdown("""
    This toolkit replicates Stata's core econometric functionality through an intuitive Python interface. 
    Built for researchers, students, and practitioners who want the power of Stata with the flexibility of Python.
    
    **Key Features:**
    - 🎯 **23 Analysis Functions** covering descriptive statistics to advanced econometrics
    - 🔌 **Plugin Architecture** for easy extension and customization
    - 📊 **Real-time Results** with immediate visualization and export
    - 🌐 **Web-based Interface** accessible from any device
    """)

elif run:
    st.subheader("🔍 Analysis Results")
    
    try:
        # Ensure the uploaded file pointer is at the start before reading
        try:
            uploaded_file.seek(0)
        except Exception:
            pass
        df = pd.read_csv(uploaded_file)
        st.success(f"✅ Successfully loaded dataset with {len(df)} rows and {len(df.columns)} columns")
        
        # Show data preview
        with st.expander("📋 Data Preview", expanded=False):
            st.dataframe(df.head(), use_container_width=True)
            st.caption(f"Showing first 5 rows of {len(df)} total rows")
        
    except Exception as exc:
        st.error(f"❌ Failed to read CSV: {exc}")
        st.stop()

    # Progress bar for analysis
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    all_outputs: List[dict] = []
    for i, func in enumerate(selected):
        try:
            status_text.text(f"Running {func.display_name}...")
            # If this function has a collected configuration, pass it through
            if func.display_name in configurations:
                cfg = configurations[func.display_name]
                if hasattr(func, 'apply_with_config'):
                    outputs = func.apply_with_config(df, cfg)
                else:
                    # Try calling apply with config, fallback to apply(df)
                    try:
                        outputs = func.apply(df, cfg)
                    except TypeError:
                        outputs = func.apply(df)
            else:
                outputs = func.apply(df)
            all_outputs.extend(outputs)
            progress_bar.progress((i + 1) / len(selected))
        except Exception as exc:
            st.error(f"❌ {func.display_name} failed: {exc}")
            continue
    
    status_text.text("✅ Analysis complete!")
    progress_bar.progress(1.0)
    
    # Display results
    if all_outputs:
        st.success(f"🎉 Successfully completed {len(selected)} analysis function(s)")
        
        for item in all_outputs:
            st.markdown(f"### 📊 {item.get('title','Output')}")
            if item["type"] == "table":
                st.dataframe(item["data"], use_container_width=True)
            elif item["type"] == "image":
                st.image(base64.b64decode(item["data"]))
            elif item["type"] == "text":
                st.write(item["data"])
        
        # Export options
        st.markdown("### 📤 Export Results")
        col1, col2 = st.columns(2)
        
        with col1:
            html = _build_report_html(all_outputs)
            st.download_button(
                label="📄 Download HTML Report",
                data=html,
                file_name="inferEcon_report.html",
                mime="text/html",
                help="Download a complete HTML report of your analysis"
            )
        
        with col2:
            st.info("💡 **Tip**: The HTML report can be shared, printed, or converted to PDF")
    
    else:
        st.warning("⚠️ No results were generated. Please check your data and function selection.")

# Footer
st.markdown("---")
st.markdown(
    "🔗 **InferEcon** | "
    "[GitHub](https://github.com/insdaguirre/InferEcon) | "
    "Built with ❤️ using Python & Streamlit"
)
